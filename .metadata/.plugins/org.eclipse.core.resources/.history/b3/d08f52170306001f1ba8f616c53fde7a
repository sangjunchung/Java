package com.kh.PropertiesEx;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.Properties;

/*
Properties = 속성 또는 설정, 필히 넣어야하는 값을 작성

Map이랑 비슷한 형태의 데이터를 관리하는데 사용
key(키) 와 value(값) 으로 이루어져 있음
키와 값이 숫자가 아니라 문자열 인 형태로 가지고 있음

메서드
setProperty(String key, String value) : 지정된 키와 값으로 맵에 항목을 추가
getProperty(String key) : 주어진 키에 대한 값을 반환
getProperty(String key, String value) : 주어진 키에 대한 값을 전달하지만, 해당 키가 없을 경우에는 기본 값을 반환
load(InputStream in) : 입력 스트림에서 속성 목록을 읽어옴
Store(OutputStream out, String comment) : 출력 스트림에서 속성 목록을 저장

properties 의 경우에는 프로그램이나 코드를 실행할 때 필수로 설정해줘야하는 내용을 작성한 후 코드가 아니라 파일로 주로 존재

map 은 주로 데이터를 다루지만 properties 의 경우 인증키나, 회원 인증번호를 보내기위해서 인증을 위해 필요한 내용을 작성해놓는 공간

*/

public class PropertiesEx {

	public static void main(String[] args) {
		Properties pp = new Properties();
		
		try {
			FileInputStream cFile = new FileInputStream("pp.properties");
			pp.load(cFile);
			cFile.close();
			
			// 관리자 이름 비밀번호 가져올 것
			// 만약 관리자 이름과 관리자 비밀번호가 없다면 null 값으로 설정되서 나올 것
			String adminName = pp.getProperty("관리자이름"); 
			String adminPW = pp.getProperty("관리자비밀번호"); 
			
			System.out.println("관리자 이름 : "+adminName);
			System.out.println("관리자 비밀번호 : "+adminPW);
					
			// 만약 null 값으로 아무런 값도 없는 것이 싫다면 설정 값을 변경해줄 수 있음
			pp.setProperty("관리자이름", "manager");
			pp.setProperty("관리자비밀번호", "1234");
			
			// 변경된 설정을 파일에 저장
			FileOutputStream saveFile = new FileOutputStream("pp.properties");
			
			// 새로운 내용 저장과 저장할 때 어떤 내용을 수정하거나 삭제하거나 추가했는지 작성
			pp.store(saveFile, "새로 이름과 비번 저장");
			
			// 파일 저장 종료
			saveFile.close();
			
			System.out.println("관리자가 성공적으로 변경되었습니다.");
			
		} catch (FileNotFoundException e) {
			System.out.println("파일이 존재하지 않습니다.");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
